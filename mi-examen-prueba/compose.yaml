services:
  ## Base de Datos para el proyecto examen-prueba
  mongodb:
    image: mongo
    container_name: mongo_db
    ports:
      - 27017:27017
    volumes:
      - mongo:/data
    environment:
      - MONGO_INITDB_DATABASE=examenPrueba
      - MONGO_INITDB_ROOT_PASSWORD=examenPrueba130325
      - MONGO_INITDB_ROOT_USERNAME=root
  ## Redis implementado en el proyecto examen-pruebas
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: [ "redis-server", "--save", "''", "--appendonly", "no" ]
  ## Zookeeper utilizado por kafka
  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  ### Kafka utilizado en el proyecto examen-prueba
  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  ## Zipkin utilizado por resillence4j para el proyecto examen-prueba
  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin:2.24.2
    ports:
      - "9411:9411"
  ## Prometheus utilizado por resillence4j para el proyecto examen-prueba
  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.46.0
    ports:
      - "9090:9090"
    volumes:
      - ./file/prometheus.yml:/etc/prometheus/prometheus.yaml
  ## Grafana utilizado por resillence4j para el proyecto examen-prueba
  grafana:
    container_name: grafana
    image: grafana/grafana-oss:10.0.3
    restart: unless-stopped
    ports:
      - "3000:3000"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    links:
      - prometheus
    volumes:
      - ./files/grafana:/var/lib/grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_SECURITY_ADMIN_USER: admin
    depends_on:
      - prometheus
  ### MySQL database for Security
  db-token-jwt:
    container_name: db-token-jwt
    image: mysql:8.0.33
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ms_token
      MYSQL_USER: token
      MYSQL_PASSWORD: 150919
      MYSQL_ROOT_PASSWORD: 150919
    ports:
      - 3306:3306
    expose:
      - 3306
  vault:
    image: hashicorp/vault:latest
    container_name: vault
    ports:
      - "8200:8200"
    restart: unless-stopped
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: "root"
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200"
    volumes:
      - ./vault-data:/vault/file
      - ./vault-config:/vault/config
    cap_add:
      - IPC_LOCK
    networks:
      - vault_network

volumes:
  mongo: {}
  redis_data: {}

networks:
  vault_network: